name: Deploy to Elastic Beanstalk

on:
  push:
    branches:
      - main  # main = Production branch

permissions:
  id-token: write        # Required for OIDC --
  contents: read         # Required to read repo content

jobs:
  deploy:
    name: Deploy Backend to EB (Prod)
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout source code
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2. Set up Python (required for EB CLI)
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # 3. Install AWS EB CLI
      - name: Install AWS EB CLI
        run: |
          python -m pip install --upgrade pip
          pip install awsebcli

      # 4. Configure AWS credentials via GitHub OIDC (no secrets needed)
      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::xxxxxxxxxxxx:role/GitHubEBDeployRole
          role-session-name: GitHubDeploySession
          aws-region: eu-west-1

      # 5. Initialize Elastic Beanstalk CLI (optional on every run)
      - name: Initialize EB CLI
        run: |
          eb init backend-api-prod \
            --platform "PHP" \
            --region eu-west-1 \
            --debug
          eb use backend-api-prod-env

      # 6. Deploy Application to Elastic Beanstalk
      - name: Deploy to Elastic Beanstalk
        run: |
          eb deploy --staged

  notify:
      name: Notify developer about pushes
      runs-on: ubuntu-latest
      needs: deploy  # Ensure this runs after the deploy job
      steps:
         - name: Send Telegram Notification
           env:
              TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
              TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_PROFILE_ID }}
           run: |
              EVENT_TYPE="${{ github.event_name }}"
              EVENT_ACTION="${{ github.event.action }}"
              ACTOR="${{ github.actor }}"
              REPO="${{ github.repository }}"
              REPO_URL="https://github.com/$REPO"
              BRANCH="${{ github.ref }}"
              BRANCH_NAME="${BRANCH##*/}"
              
              # Initialize variables
              T0ITLE=""
              URL=""
              COMMITS=""
              MESSAGE=""
              
              # Set message content based on event type
              case "$EVENT_TYPE" in
                "push")
                  TITLE="${{ github.event.head_commit.message }}"
                  URL="${{ github.event.compare }}"
                  TYPE_EMOJI="ü´∏üèº"
                  ;;
                "issues")
                  TITLE="${{ github.event.issue.title }}"
                  URL="${{ github.event.issue.html_url }}"
                  TYPE_EMOJI="üò±"
                  ;;
                "pull_request")
                  TITLE="${{ github.event.pull_request.title }}"
                  URL="${{ github.event.pull_request.html_url }}"
                  TYPE_EMOJI="üòé"
                  ;;
                "issue_comment")
                  TITLE="${{ github.event.issue.title }}"
                  URL="${{ github.event.comment.html_url }}"
                  TYPE_EMOJI="‚úâÔ∏è"
                  ;;
                "pull_request_review")
                  TITLE="${{ github.event.pull_request.title }}"
                  URL="${{ github.event.pull_request.html_url }}"
                  TYPE_EMOJI="üßê"
                  ;;
                *)
                  echo "Unhandled event type: $EVENT_TYPE"
                  exit 1
                  ;;
              esac
              
              # Construct message with markdown
              MESSAGE="
              ${TYPE_EMOJI}  *${ACTOR}* *${EVENT_ACTION^}* *${EVENT_TYPE}*
              
              *${TITLE}*
              ${REPO} | ${BRANCH_NAME}
              " 
              
              # Send message with inline keyboard
              PAYLOAD=$(jq -n \
                --arg chat_id "$TELEGRAM_CHAT_ID" \
                --arg text "$MESSAGE" \
                --arg url "$URL" \
                '{
                  chat_id: $chat_id,
                  text: $text,
                  parse_mode: "Markdown",
                  reply_markup: {
                    inline_keyboard: [[
                      {
                        text: "Open in GitHub üîó",
                        url: $url
                      }
                    ]]
                  }
                }')
              
              curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
                   -H "Content-Type: application/json" \
                   -d "$PAYLOAD"
